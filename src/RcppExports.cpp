// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dnormC_multi
NumericMatrix dnormC_multi(NumericVector x, NumericVector m, double sd, bool Log);
RcppExport SEXP _sslcov_dnormC_multi(SEXP xSEXP, SEXP mSEXP, SEXP sdSEXP, SEXP LogSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< bool >::type Log(LogSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormC_multi(x, m, sd, Log));
    return rcpp_result_gen;
END_RCPP
}
// ecdf_cpp
NumericVector ecdf_cpp(NumericVector sobs, NumericVector sref);
RcppExport SEXP _sslcov_ecdf_cpp(SEXP sobsSEXP, SEXP srefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sobs(sobsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sref(srefSEXP);
    rcpp_result_gen = Rcpp::wrap(ecdf_cpp(sobs, sref));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sslcov_dnormC_multi", (DL_FUNC) &_sslcov_dnormC_multi, 4},
    {"_sslcov_ecdf_cpp", (DL_FUNC) &_sslcov_ecdf_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sslcov(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
